var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * 本模块以插件形式实现了分域服务调用器
 * 它依赖的配置文件为
 * asset/conf/services.json -- 服务配置
 * asset/conf/domains.json  -- 域服务调用配置(包括本域)
 */
import Vue from 'vue';
import axios from 'axios';
import domainsConfig from './asset/conf/domains';
import servicesConfig from './asset/conf/services';

var domains = getDomains(domainsConfig);
var services = getServices(servicesConfig);

// 将服务配置转为只读对象
function getServices(conf) {
  var obj = Object.create(null);
  for (var key in conf) {
    if (_typeof(conf[key]) === 'object') {
      Object.defineProperty(obj, key, {
        value: getServices(conf[key]),
        enumerable: true,
        writable: false,
        configurable: false
      });
    } else {
      Object.defineProperty(obj, key, {
        value: conf[key],
        enumerable: true,
        writable: false,
        configurable: false
      });
    }
  }
  return obj;
}

// 深度合并多个对象，返回合并后的新对象
function merge() {
  var result = {};
  function assignValue(val, key) {
    if (_typeof(result[key]) === 'object' && (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object') {
      result[key] = merge(result[key], val);
    } else {
      result[key] = val;
    }
  }

  for (var _len = arguments.length, objs = Array(_len), _key = 0; _key < _len; _key++) {
    objs[_key] = arguments[_key];
  }

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = objs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var obj = _step.value;

      for (var key in obj) {
        assignValue(obj[key], key);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return result;
}

function getDomains(conf) {
  var result = {};
  var domains = conf.domains || null;
  var num = 0;
  if (domains !== null) {
    for (var key in domains) {
      key = key.trim();
      if (key !== '') {
        if (key === '$' && _typeof(domains[key]) === 'object') {
          axios.defaults = merge(axios.defaults, domains.$);
        } else {
          result[key] = axios.create(domains[key]);
          num++;
        }
      }
    }
  }
  return num > 0 ? result : null;
}

var InvokersPlugin = {
  install: function install(Vue, options) {
    Vue.services = services;
    Vue.domains = domains;
    Vue.prototype.$domains = domains;
    Vue.prototype.$services = services;
  }

  // 注册插件
};Vue.use(InvokersPlugin);

export default {
  services: services,
  domains: domains
};